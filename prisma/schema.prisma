// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  stripeCustomerId String? @unique
  subscription Subscription[]
  notes Notes[]
  ago Ago[]
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  
  access_token       String?  
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Subscription {
  stripeSubscriptionId String @id @unique
  interval String
  status String 
  planId String
  currentPeriodStart Int
  currentPeriodEnd Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id])
  userId String @unique
}

model Notes {
  id String @id @unique @default(cuid())
  title String?
  description String?
  completed Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id])
  userId String 
}

model Ago {
  id String @id @unique @default(cuid())
  societeName String?
  societeType String?
  capitalAmount Int?
  adresse String?
  postal Int?
  ville String?
  siret Int?
  rcs String?
  meetingDate DateTime?
  meetingTime String?
  participants Participants[]
  exerciceDate DateTime?
  adressePerso String?
  postalPerso Int?
  villePerso String?
  benef String?
  deficite String?
  n1Date DateTime?
  n1DateAGO DateTime?
  montant11 Int?
  montant12 Int?
  montant13 Int?
  n2Date DateTime?
  n2DateAGO DateTime?
  montant21 Int?
  montant22 Int?
  montant23 Int?
  n3Date DateTime?
  n3DateAGO DateTime?
  montant31 Int?
  montant32 Int?
  montant33 Int?
  completed Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id])
  userId String 
}

model Participants {
  id String @id @unique @default(cuid())
  sexe String?
  firstName String?
  lastName String?
  shares Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ago Ago @relation(fields: [agoId], references: [id])
  agoId String
}