// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  stripeCustomerId String? @unique
  subscription Subscription[]
  notes Notes[]
  ago Ago[]
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  
  access_token       String?  
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Subscription {
  stripeSubscriptionId String @id @unique
  interval String
  status String 
  planId String
  currentPeriodStart Int
  currentPeriodEnd Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id])
  userId String @unique
}

model Notes {
  id String @id @unique @default(cuid())
  title String?
  description String?
  completed Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id])
  userId String 
}

model Ago {
  id String @id @unique @default(cuid())
  societeName String?
  societeType String?
  capitalAmount String?
  adresse String?
  postal String?
  ville String?
  siret String?
  rcs String?
  meetingDate String?
  meetingTime String?
  participants Participants[]
  exerciceDate String?
  adressePerso String?
  postalPerso String?
  villePerso String?
  benef String?
  deficite String?
  n1Date String?
  n1DateAGO String?
  montant11 String?
  montant12 String?
  montant13 String?
  n2Date String?
  n2DateAGO String?
  montant21 String?
  montant22 String?
  montant23 String?
  n3Date String?
  n3DateAGO String?
  montant31 String?
  montant32 String?
  montant33 String?
  completed Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id])
  userId String 
}

model Participants {
  id String @id @unique @default(cuid())
  sexe String?
  firstName String?
  lastName String?
  shares String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ago Ago @relation(fields: [agoId], references: [id], onDelete: Cascade)
  agoId String
}